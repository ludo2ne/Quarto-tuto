---
title: "Create a static site"
author: "Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
    code-tools: true
from: markdown+emoji
number-sections: true
---


## General principle {.unnumbered}

- You define Quarto setup
- You write your content in *.qmd* files in markdown format
- Quarto will generate the site's html pages from these *.qmd* files


## Tools for local use

You will need the following tools to work locally :

- [ ] [Quarto](https://quarto.org/docs/get-started/){.external target="_blank"}

If you want to use `Python` code :

- [ ] install `Python`
- [ ] `pip install jupyter`
- [ ] `pip install <all_needed_packages>`

To authorize the download of certain pages in `pdf` format, you must run : `quarto install tinytex`


## Deploy your site with GitHub pages

### Create a repository

- [ ] Log in to [GitHub](https://github.com/){.external target="_blank"}
- [ ] Create a new repository
- [ ] Create a new branch named `gh-pages`
- [ ] Go to Settings > Pages
  - Deploy from a branch : **gh-pages**

::: {.callout-tip }
### Why deploy from pages branch *gh-pages* ?

This will keep your branch `main` clean and avoid including html pages generated by Quarto : 

- branch `main` : setup and content in qmd files 
- branch `gh-pages` : html for deployment
:::


### Turn your repository into a Quarto project

You will have to create the following files :

| File                          | Description                              |
|-------------------------------|------------------------------------------|
| _quarto.yml                   | Configuration file for Quarto setup      |
| index.qmd                     | The home page of the project             |
| styles.css                    | CSS file for styling the project         |
| .github/workflows/publish.yml | Pipeline setup for deployment on GitHub  |


Recommended files :

- `requirements.txt`
  - list of Python packages (if you use Python in your project)
- `.gitignore`
  - to tell git to ignore these files
  ```
  /.quarto/
  /_site/
  ```
- `doc` folder to store your files in a clean tree structure

Example of tree :

```{.python}
├── index.qmd
├── _quarto.yml
├── styles.css
├── .github/
│   └── workflows/
│       └── publish.yml
└── doc/
    ├── lesson/
    │   ├── img/
    │   │   ├── image1.jpg
    │   │   └── image2.jpg
    │   ├── lesson1.qmd
    │   ├── lesson2.qmd
    │   └── ...
    ├── practical/
    │   ├── practical1.qmd
    │   └── ...
    └── presentation/
        ├── presentation1.qmd
        └── ...
```


### Setup GitHub actions

::: {.callout-note}
- when you push the main branch, the `.github/worflows/publish.yml` file triggers a pipeline
- the site is deployed by default on `https://<username>.github.io/<repositoryname>`
  - [ ] On the project's GitHub page, add this link in the `About` section
:::

The `.github/workflows/publish.yml` file contains the list of actions required to deploy the site. 

You will need to add the commands to install all the necessary R or Python packages.

Example for Python :

```{.yaml}

    steps:
      ...

      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - run: pip install jupyter
      - run: pip install -r requirements.txt

      ...
``` 


## General use

- edit or create *.qmd* files
- render the website
  - open a terminal
  - `quarto render`
  - it generate `_site` folder containing html pages
- deploy on GitHub pages
  - *commit* files with Git and *push*
  - a few minutes later, the site will be available
