---
title: "Create a static site"
description: "Build a static site using Quarto in just 10 minutes"
author: "Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
---


## General principle {.unnumbered}

With Quarto, it's very easy to create a static site containing HTML pages, slides, executed Python or R code, notebooks, pdf files...

It only takes **10 minutes** to get a first result, perhaps a little more the first time.

- You define Quarto setup
- You write your content in *.qmd* files with markdown language
- Quarto will generate the site's html pages from these *.qmd* files


## Local use

You will need the following tools to work locally :

- [ ] Install [Quarto](https://quarto.org/docs/get-started/){target="_blank"}
- [ ] Choose an editor and install it, for example [Visual Studio Code](https://code.visualstudio.com/){target="_blank"} or [R Studio](https://posit.co/download/rstudio-desktop/){target="_blank"} (also created by Posit)
- [ ] Optionnal: if you want to generate pdf files, install tinytex `quarto install tinytex`


### Create a Quarto project

You can read [official documentation](https://quarto.org/docs/projects/quarto-projects.html){target="_blank"} or simply follow these advices

To create a Quarto projet you will need the following files :

| File                          | Description                              |
|-------------------------------|------------------------------------------|
| _quarto.yml                   | Project Metadata                         |
| index.qmd                     | Home page                                |
| styles.css                    | CSS file for styling the project         |

::: {.callout-tip}
We strongly advice you to also create a folder named `doc` to store your content in a clear tree structure.
:::

Example of trees:

::: {.panel-tabset .nav-pills}

#### Simple

```{.default}
├── index.qmd
├── _quarto.yml
├── styles.css
└── doc/
    ├── page1.qmd
    ├── page2.qmd
    └── page3.qmd
```

#### Advanced

```{.default}
├── index.qmd
├── _quarto.yml
├── styles.css
├── doc/
|   ├── lesson/
|   │   ├── img/
|   │   │   ├── image1.jpg
|   │   │   └── image2.jpg
|   │   ├── lesson1.qmd
|   │   ├── lesson2.qmd
|   │   └── ...
|   ├── practical/
|   │   ├── practical1.qmd
|   │   └── ...
|   └── presentation/
|       ├── presentation1.qmd
|       └── ...
├── .gitignore
└── .github/
    └── workflows/
        └── publish.yml
```

:::

- [ ] Create a folder with files of the **simple tree**


### Metadata

- [ ] Create at the project root, a file named `_quarto.yml` 


::: {.panel-tabset .nav-pills}

#### Simple

```{.yml}
project:
  type: website
website:
  title: "My website title"
  navbar:
    background: "#447099"
    left:
      - href: index.qmd
        text: Home
      - text: "Drop-down list of pages"
        menu:
          - href: doc/page1.qmd
            text: "Page 1"
          - href: doc/page2.qmd
            text: "Page 2"
      - href: doc/page3.qmd
        text: Direct link to Page 3
    right:      
      - icon: github
        href: "https://github.com/<username>/<repository_name>"
        target: "_blank"
format:
  html:
    theme:
      dark: solar
      light: cosmo
    css: styles.css
```

#### Advanced

[_quarto.yml](https://github.com/ludo2ne/Quarto-tuto/blob/main/_quarto.yml){target="_blank"} file of Quarto-tuto.

:::

### Create your index

- [ ] At the project root, create file `index.qmd` 
  - It will contain some metadata (title, description, author...) and then your content in markdown language

```{.default}
---
title: "My home page"
description: "Description of my home page"
author: "Ludovic Deneuville"
format: html
from: markdown+emoji
---

## My content

my content using Markdown language
```

### Create pages

- [ ] The same way you created the index file, create files `doc/pages1.qmd`, `doc/pages2.qmd`, `doc/pages3.qmd`

::: {.callout-tip}
If you want more markdown content, feel free to see code of files in the Examples section, such as [Practical](examples/practical.qmd){target="_blank"} 
:::

### Play with styles

- [ ] At the project root, create file `styles.css`
  - you can let it empty for now

### Render

- [ ] In a terminal, run `quarto render`. This command will convert your *qmd* files to *html*
- [ ] Go to folder *\_site* and open your *index.html* 

::: {.callout-important title="Congratulation"}
:tada: you created your first quarto website!
:::

## Deploy with GitHub pages

### Create a repository

- [ ] Log in to [GitHub](https://github.com/){target="_blank"}
- [ ] Create a new repository
- [ ] Create a new branch named `gh-pages`

### Clone your repository

- [ ] Paste in your local repository the content of your quarto project
- [ ] At the root, add a `.gitignore` file to exlude these folders
  ```{.default}
  /.quarto/
  /_site/ 
  ```
- [ ] Add this file to setup a publish pipeline 
  ```{.default}
  ├── .github/
  │   └── workflows/
  │       └── publish.yml
  ```
- [ ] Paste this content
  ```{.yml}
  on:
    workflow_dispatch:
    push:
      branches: main
  
  name: Quarto Publish
  
  jobs:
    build-deploy:
      runs-on: ubuntu-latest
      permissions:
        contents: write
      steps:
        - name: Check out repository
          uses: actions/checkout@v4
  
        - name: Set up Quarto
          uses: quarto-dev/quarto-actions/setup@v2
  
        - name: Render and Publish
          uses: quarto-dev/quarto-actions/publish@v2
          with:
            target: gh-pages
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ```

::: {.callout-note}
The `.github/workflows/publish.yml` file contains the list of actions required to deploy the site ([Example here](https://github.com/ludo2ne/Quarto-tuto/blob/main/.github/workflows/publish.yml){target="_blank"})
:::

- [ ] Using Git, *add*, *commit* files and then *push*
  - A github pipeline is triggered by a *push*
- [ ] In your GitHub repository, check in the *Action* section if everything is fine

A few minutes later, the site will be available on `https://<username>.github.io/<repository_name>`

- [ ] On the project's GitHub page, add this link in the `About` section

## Python Setup

::: {.callout-note}
If you want to execute Python code in your qmd files.
:::


### Local

- [ ] install `Python`
- [ ] list needed packages in file *requirements.txt*
- [ ] `pip install jupyter`
- [ ] `pip install -r requirements.txt`

### Remote

- [ ] in file `.github/workflow/publish.yml`, add this step before step *Render and Publish*
  ```{.yaml}
      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - run: pip install jupyter
      - run: pip install -r requirements.txt
  ```

## R Setup

::: {.callout-note}
If you want to execute R code in your qmd files.
:::

### Local

- [ ] install R
- [ ] install needed packages

### Remote

- [ ] List needed packages in file `DESCRIPTION`
- [ ] in file `.github/workflow/publish.yml`, add this step before step *Render and Publish*
  ```{.yaml}
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.0'

      - name: Install R packages from DESCRIPTION file
        uses: r-lib/actions/setup-r-dependencies@v2
  ```


