---
title: "Create a static site"
description: "Build a static site using Quarto in just 10 minutes"
author: "Ludovic Deneuville"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
---


## General principle {.unnumbered}

With Quarto, it's very easy to create a static site containing HTML pages, slides, executed Python or R code, notebooks, pdf files... It only takes **10 minutes** to get a first result, perhaps a little more the first time.

- You define Quarto setup
- You write your content in *.qmd* files in markdown format
- Quarto will generate the site's html pages from these *.qmd* files


## Local use

You will need the following tools to work locally :

- [ ] [Install Quarto](https://quarto.org/docs/get-started/){target="_blank"}
- [ ] Choose an editor and install it, for example Visual Studio Code or R Studio
- [ ] If you wanna generate pdf file, install : `quarto install tinytex`


## Deploy your site with GitHub pages

### Create a repository

- [ ] Log in to [GitHub](https://github.com/){.external target="_blank"}
- [ ] Create a new repository
- [ ] Create a new branch named `gh-pages`
- [ ] Go to Settings > Pages
  - Deploy from a branch : **gh-pages**


### Turn your repository into a Quarto project

We recommend opening your project in an IDE such as VSCode or RStudio.

You will have to create the following files :

| File                          | Description                              |
|-------------------------------|------------------------------------------|
| _quarto.yml                   | Configuration file for Quarto setup      |
| index.qmd                     | The home page of the project             |
| styles.css                    | CSS file for styling the project         |
| .github/workflows/publish.yml | Pipeline setup for deployment on GitHub  |


Recommended files :

- `.gitignore`
  - to tell git to ignore these files
  ```
  /.quarto/
  /_site/
  ```
- `doc` folder to store your files in a clean tree structure

Example of tree :

```{.python}
├── index.qmd
├── _quarto.yml
├── styles.css
├── .github/
│   └── workflows/
│       └── publish.yml
└── doc/
    ├── lesson/
    │   ├── img/
    │   │   ├── image1.jpg
    │   │   └── image2.jpg
    │   ├── lesson1.qmd
    │   ├── lesson2.qmd
    │   └── ...
    ├── practical/
    │   ├── practical1.qmd
    │   └── ...
    └── presentation/
        ├── presentation1.qmd
        └── ...
```


## Setup GitHub actions

::: {.callout-note}
- when you push the main branch, the `.github/worflows/publish.yml` file triggers a pipeline
- the site is deployed by default on *https://<username>.github.io/<repositoryname>*
  - [ ] On the project's GitHub page, add this link in the `About` section
:::

The `.github/workflows/publish.yml` file contains the list of actions required to deploy the site ([Example here](https://github.com/ludo2ne/Quarto-tuto/blob/main/.github/workflows/publish.yml){target="_blank"})


## Python Setup

### Local

- [ ] install `Python`
- [ ] list needed packages in file *requirements.txt*
- [ ] `pip install jupyter`
- [ ] `pip install -r requirements.txt`

### Remote

- [ ] in file `.github/workflow/publish.yml`, add a step to install Python and dependencies
  ```{.yaml}
      - name: Install Python and Dependencies
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - run: pip install jupyter
      - run: pip install -r requirements.txt
  ```

## R Setup

### Local

- [ ] install R
- [ ] install needed packages

### Remote

- [ ] List needed packages in file `DESCRIPTION`
- [ ] in file `.github/workflow/publish.yml`, add steps to install R and packages
  ```{.yaml}
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.0'

      - name: Install R packages from DESCRIPTION file
        uses: r-lib/actions/setup-r-dependencies@v2
  ```


## General use

- edit or create *.qmd* files
- render the website
  - open a terminal
  - `quarto render`
  - it generate `_site` folder containing html pages
- deploy on GitHub pages
  - *commit* files with Git and *push*
  - a few minutes later, the site will be available on `https://<username>.github.io/<repository_name>`
