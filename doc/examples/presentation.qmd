---
title: "Tuto Quarto-Reveal.js"
subtitle: "Create a slideshow using Quarto and Reveal.js"
author: "Ludovic Deneuville"
format:
  revealjs:
    theme: moon
    footer: "[Quarto-tuto](../../index.html)"      # Link to the homepage
    slide-number: c/t                              # collapsed/total
    slide-level: 3                                 # Title 3 will create a new slide
    preview-links: true
    chalkboard: true
    controls: true
    transition: slide
from: markdown+emoji
---

## Introduction

- hello
- welcome
- [Reveal.js](https://quarto.org/docs/presentations/revealjs/)


## :dart: Objectives

- [ ] Create a slideshow
- [ ] Use the Speaker View (shortcut : S)
- [ ] Explain some metadata


## Metadata

The metadata of the current document is shown at the top of the page

- `preview-links: true` : view in current window. [Try it](https://quarto.org/docs/presentations/revealjs/)
- `transition: slide` : choose transmition mode
- `chalkboard: true` : activate chalkboard
- `controls: true` : show navigation arrows


## Speaker View

- `::: {.notes}` to add personal notes
- `S` to activate `Speaker View`

Utilisation :

- On your own screen: display Speaker View
- On the presentation screen: display the slideshow

::: {.notes}
Personal notes

- note 1
- note 2
:::


## Chalkboard

* `B` to open a blackboard
* `C` to draw on your slide


## Lists

- item 1
  - item 1.1
  - item 1.2
- item 2

incr√©mental display

::: incremental
- item 3
- item 4
:::


## Table

| Number | Name                    | Main City          |
| ------ | ----------------------- | ------------------ |
| 01     | Ain                     | Bourg-en-Bresse    |
| 02     | Aisne                   | Laon               |
| 03     | Allier                  | Moulins            |
| 04     | Alpes-de-Haute-Provence | Digne-les-Bains    |
| 05     | Hautes-Alpes            | Gap                |

: French Departments {.striped .hover .success}


## Code{.smaller}

::: {.panel-tabset .nav-pills}

### Code

```{python}
#| eval: false
#| echo: true
import matplotlib.pyplot as plt

def collatz_conjecture(n):
    sequence = [n]
    
    while n != 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        sequence.append(n)
    
    return sequence

def plot_collatz(n):
    sequence = collatz_conjecture(n)
    plt.plot(sequence, linestyle='-', marker='o', markersize=3, color='darkcyan')
    plt.xlabel('Step')
    plt.ylabel('Value')
    plt.title('Collatz conjecture')
    plt.grid(True)
    plt.show()

plot_collatz(27)
```


### Result

```{python}
#| label: fig-collatz27
#| fig-cap: "Collatz conjecture starting with n = 27"
import matplotlib.pyplot as plt

def collatz_conjecture(n):
    sequence = [n]
    
    while n != 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        sequence.append(n)
    
    return sequence

def plot_collatz(n):
    sequence = collatz_conjecture(n)
    plt.plot(sequence, linestyle='-', marker='o', markersize=3, color='darkcyan')
    plt.xlabel('Step')
    plt.ylabel('Value')
    plt.title('Collatz conjecture')
    plt.grid(True)
    plt.show()

plot_collatz(27)
```

### Highlight lines

```{python}
#| eval: false
#| echo: true
#| code-line-numbers: "6-11"
import matplotlib.pyplot as plt

def collatz_conjecture(n):
    sequence = [n]
    
    while n != 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        sequence.append(n)
    
    return sequence

def plot_collatz(n):
    sequence = collatz_conjecture(n)
    plt.plot(sequence, linestyle='-', marker='o', markersize=3, color='darkcyan')
    plt.xlabel('Step')
    plt.ylabel('Value')
    plt.title('Collatz conjecture')
    plt.grid(True)
    plt.show()

plot_collatz(27)
```

:::

## Big text

The `r-fit-text` class makes text as large as possible without overflowing the slide.

::: {.r-fit-text}
Big Text
:::


## Image size auto

Use class `.r-stretch` with your image to automatically adapt image size.

![](img/stones.jpg){.r-stretch}


## Animation

### {auto-animate=true}

Animation

### {auto-animate=true}

Implicit

Animation